# -*- coding: utf-8 -*-
"""Dinâmica Recomendação.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1piW6dlgZsiqLatzXtaHU91rFUt3P9-_-

#Modelo de recomendação de Items de uma loja
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
import scipy

from google.colab import drive
drive.mount('/content/drive')

df_items = pd.read_csv('/content/drive/MyDrive/Database/dinâmica/DNC_order_items_dataset.csv', index_col=0)
df_prod = pd.read_csv('/content/drive/MyDrive/Database/dinâmica/DNC_products_dataset.csv', index_col=0)
df_order = pd.read_csv('/content/drive/MyDrive/Database/dinâmica/DNC_orders_dataset.csv', index_col=0)
df_review = pd.read_csv('/content/drive/MyDrive/Database/dinâmica/DNC_order_reviews_dataset.csv', index_col=0)

df_geral = df_order.merge(df_items, on='order_id', how='left')

df_geral = df_geral.merge(df_prod, on='product_id', how='left')

df = df_geral.merge(df_review, on ='order_id', how='left')

df.dropna(inplace=True)

df.drop(["order_item_id",'price','product_name_lenght','product_description_lenght','product_weight_g','product_length_cm', 'product_height_cm','product_width_cm','review_id','order_status','order_id'],axis=1, inplace=True)

def pipeline(dataf):
  return dataf.copy()

def get_items_count(dataf):
  return dataf.groupby(by='product_id', as_index=False) \
    .agg({'customer_id': pd.Series.nunique}) \
    .rename(columns={'customer_id':'customer_id_count'}) \
    .set_index('product_id') \
    .sort_values('customer_id_count', ascending = False)

def get_avg_ratings(dataf):
  return dataf.groupby(by='product_id', as_index=False) \
    .agg({'review_score': np.mean}) \
    .rename(columns={'review_score':'review_score_mean'}) \
    .set_index('product_id') \
    .sort_values('review_score_mean', ascending = False)

def get_n_top_values(dataf, n):
  return dataf.head(n) \
    .index \
    .tolist()

top_selling_items = df \
  .pipe(pipeline) \
  .pipe(get_items_count) \
  .pipe(get_n_top_values, 10)

top_ratings_items = df \
  .pipe(pipeline) \
  .pipe(get_avg_ratings) \
  .pipe(get_n_top_values, 15000)

"""#Utilizando Matriz Densa"""

#Matriz Densa
Matriz_de_relacionamento_top_rating_items = df[df['product_id'].isin(top_ratings_items)] \
.pivot_table(index= 'product_id', columns='customer_id', values='review_score').fillna(0)

Matriz_de_relacionamento_top_rating_items.shape

cos_item = cosine_similarity(Matriz_de_relacionamento_top_rating_items)

print(cos_item)
cos_item.shape

def recomender(id_item):
  print(f'Item de interesse: {id_item}')
  try:
    livro_idx = Matriz_de_relacionamento_top_rating_items.index.tolist().index(id_item)
    closest_10_items = np.argsort(-cos_item[livro_idx])[1:11]
    print(f'retornando 10 itens mais próximos de: {id_item}')
    return Matriz_de_relacionamento_top_rating_items.index[closest_10_items].tolist()
  except ValueError as e:
    print(f'{id_item}, não está incluso na matriz de recomendação. Neste caso, segue os 10 mais vendidos')
    return top_selling_items

id_item_desejado = 'be5679ce5a2343c40455223d7bef6dfb'

id_recomender = recomender(id_item_desejado)

pd.DataFrame(data= id_recomender, columns=['product_id']) \
.merge(df_prod,on='product_id', how='left') \
.drop(['product_name_lenght','product_description_lenght', 
       'product_weight_g','product_length_cm',
       'product_height_cm', 'product_width_cm'],
      axis=1)

"""#Utilizando Matriz Esperça"""

Matriz_esparca = pd.get_dummies(df.sample(10000),columns=['customer_id','product_category_name'], sparse=True)

Matriz_esparca[Matriz_esparca['product_id']=='7fb04722aba7a2b632bac8f9819796f3']

Matriz_esparca = scipy.sparse.csr_matrix(Matriz_esparca.values)

cos_item = cosine_similarity(Matriz_esparca)

print(cos_item)
cos_item.shape

def recomender(id_item):
  print(f'Item de interesse: {id_item}')
  try:
    livro_idx = Matriz_esparca.index.tolist().index(id_item)
    closest_10_items = np.argsort(-cos_item[livro_idx])[1:11]
    print(f'retornando 10 itens mais próximos de: {id_item}')
    return Matriz_esparca.index[closest_10_items].tolist()
  except ValueError as e:
    print(f'{id_item}, não está incluso na matriz de recomendação. Neste caso, segue os 10 mais vendidos')
    return top_selling_items

id_item_desejado = 'be5679ce5a2343c40455223d7bef6dfb'

id_recomender = recomender(id_item_desejado)

pd.DataFrame(data= id_recomender, columns=['product_id']) \
.merge(df_prod,on='product_id', how='left') \
.drop(['product_name_lenght','product_description_lenght', 
       'product_weight_g','product_length_cm',
       'product_height_cm', 'product_width_cm'],
      axis=1)